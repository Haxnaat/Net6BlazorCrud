
@page "/registrationById"
@page "/registrationById/{id:int}"

@inject IProductUiService ProductUiService
@inject ICustomerUiService CustomerUiService
@inject IRegistrationUiService RegistrationUiService

@inject NavigationManager NavigationManager

@if (Id == null)
{
    <PageTitle>Create a new Registration</PageTitle>
    <h3>Create a new Registration</h3>
}
else
{
    <PageTitle>Edit Registration</PageTitle>
    <h3>Edit Registration</h3>
}

<EditForm Model="@registration" OnValidSubmit="HandleSubmit">
     <DataAnnotationsValidator />
    <div>
        <label>Select Customer</label><br />
        <InputSelect @bind-Value="registration.CustomerId" class="form-select">
            @foreach (var customer in CustomerUiService.Customer)
            {
                <option value="@customer.Id">@customer.FirstName @customer.LastName</option>
            }
        </InputSelect>
    </div>
     <div>
        <label>Select Product</label><br />
        <InputSelect @bind-Value="registration.ProductId" class="form-select">
            @foreach (var product in ProductUiService.Products)
            {
                <option value="@product.Id">@product.Name</option>
            }
        </InputSelect>
    </div>
    
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="cancelSaveUpdate">Cancel</button>
</EditForm>



@code {
    [Parameter]
    public int? Id { get; set; }
    string btnText = string.Empty;

    Registration registration = new Registration { Product = new Product() , Customer = new Customer() };
    

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save" : "Update";
        await CustomerUiService.GetCustomers();
        await ProductUiService.GetProducts();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
           
        }
        else
        {
            registration = await RegistrationUiService.GetRegistrationById((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        try
        {
            if (Id == null)
            {

                await RegistrationUiService.CreateRegistration(registration);
            }
            else
            {
                await RegistrationUiService.CreateRegistration(registration);
            }
        }
        catch (Exception e)
        {
            throw e;
        }

       
    }

    void cancelSaveUpdate()
    {
        NavigationManager.NavigateTo("/registrations");
    }
}
